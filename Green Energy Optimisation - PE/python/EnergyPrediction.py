#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#Calling format: python EnergyPrediction.py <inputfile> <prediction file> <actual file>
"""
Created on Wed Feb  7 11:47:54 2018

@author: prince
"""

import sys
from pandas import read_csv
from pandas import datetime
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error
import numpy
from math import sqrt

#Input details of data center location
if(len(sys.argv) < 2):
    energy_input = 'sample.csv'
else:
    energy_input = sys.argv[1]
if(len(sys.argv) < 3):
    energy_file = 'energy_pred_file.txt'
else:
    energy_file = sys.argv[2]
if(len(sys.argv) < 4):
    energy_file_act = 'energy_act_file.txt'
else:
    energy_file_act = sys.argv[3]
if(len(sys.argv) < 5):
    area1 = 1*(10**4)
else:
    area1 = float(sys.argv[4])
if(len(sys.argv) < 6):
    efficiency = 0.15
else:
    efficiency = float(sys.argv[5])

    
# area1=1*(10**4)
# efficiency=0.15

print(datetime.now)
def parser(a,b,c,d):
    return datetime.strptime('%s %s %s %s' % (a, b, c, d),'%Y %j %H %M')

# Creating a differenced series by a day(24*60=1440mins)
slot=1440

series = read_csv(energy_input, header=0, parse_dates=[[0,1,2,3]],index_col=0, date_parser=parser)
X = series.values
csvfilelen = X.size
#size = int(len(X) * 0.75)
#size = 87840-1440
size = csvfilelen - 1440           # training data - all data except the test data(of 1440 mins)

train, test = X[0:size], X[size:len(X)]
history = [x for x in train]
predictions = list()

# create a differenced series
def difference(dataset, interval=slot):
	diff = list()
	for i in range(interval, len(dataset)):
		value = dataset[i] - dataset[i - slot]
		diff.append(value)
	return numpy.array(diff)

# invert differenced value
def inverse_difference(history, yhat, interval=slot):
	return yhat + history[-interval]


differenced=difference(X)

model = ARIMA(differenced, order=(7,1,0))
model_fit = model.fit(disp=0)
forecast = model_fit.forecast(steps=slot)[0]

predarr=[]
actarr=[]
sum60=0
act60=0
min=1
for yhat in forecast:
    inverted = inverse_difference(history, yhat)
    sum60+=inverted
    act60+=test[min-1]
    
    predictions.append(inverted)
    obs=test[min-1]
    history.append(obs)
#    print('predicted=%f, expected=%f' % (inverted, obs))
    if min%60==0:
        avg60=sum60/60
        if avg60<0:
            predarr.append([0])
        else:
            predarr.append(avg60)   #predicted data
        sum60=0
        actarr.append(act60/60)     #actual observed data
        act60=0
    min+=1
#    t+=1
energy_pred_file = open(energy_file,"w")
cnt=1
# print('\npredicted energy for the day, every hour:')
hourly=[]
for x in predarr:
    hourly_energy= x[0]*area1*efficiency/1000
    hourly.append(hourly_energy)
    # print ("Energy per meter square: {}".format(x[0]))
    # print ("Mean energy generated by the plant at Hour {}: {}".format(cnt,hourly_energy))
    energy_pred_file.write( '%.3f\n' % hourly_energy)
    cnt+=1
# print()
energy_pred_file.close()

energy_act_file = open(energy_file_act,"w")
cnt=1
acthourly=[]
for x in actarr:
    hourly_energy= x[0]*area1*efficiency/1000
    if hourly_energy < 0:
        hourly_energy = 0
    acthourly.append(hourly_energy)
    energy_act_file.write( '%.3f\n' % hourly_energy)
    cnt+=1
# print()
energy_act_file.close()

error = mean_squared_error(test, predictions)
mse = sqrt(error)
print('Test MSE: %.3f, RMSE: %.3f' % (error,mse))
exit()
